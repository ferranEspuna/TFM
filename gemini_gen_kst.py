# --- Adjustable parameters for the drawing ---
U_SIZE = 5  # Number of vertices to draw in partition U
W_SIZE = 9  # Number of vertices to draw in partition W
LINE_THICKNESS = 0.8
DOT_THICKNESS = 3.0
BOX_BG_COLOR = "gray!15"
BOX_MARGIN = 0.6

# --- File to write the TikZ code to ---
output_filename = "src/figures/kst_proof_sketch.tex"

# --- TikZ Code Generation ---
lines = []
lines.append(r"% TikZ code for KST proof sketch, generated by Python script (Corrected)")
lines.append(r"\begin{tikzpicture}[scale=0.9, every node/.style={transform shape}]")

# --- Define Vertex Coordinates ---
# Partition U on the left
u_y_coords = [4 - i * 1.0 for i in range(U_SIZE)]
for i in range(U_SIZE):
    lines.append(r"\coordinate (U{}) at (0, {});".format(i, u_y_coords[i]))
# Partition W on the right
w_y_coords = [4.5 - i * 0.5 for i in range(W_SIZE)]
for i in range(W_SIZE):
    lines.append(r"\coordinate (W{}) at (8, {});".format(i, w_y_coords[i]))

# --- Draw Background Boxes and Labels ---
lines.append(r"\begin{pgfonlayer}{background}")
# Box for U
lines.append(r"  \draw[fill={}, rounded corners] (-{}, -{}) rectangle ({}, {});".format(
    BOX_BG_COLOR, BOX_MARGIN, u_y_coords[0] + BOX_MARGIN, BOX_MARGIN, u_y_coords[-1] - BOX_MARGIN
))
lines.append(r"  \node at (0, 5.2) {$U, |U|=u$};")
# Box for W
lines.append(r"  \draw[fill={}, rounded corners] (8-{}, -{}) rectangle (8+{}, {});".format(
    BOX_BG_COLOR, BOX_MARGIN, w_y_coords[0] + BOX_MARGIN, BOX_MARGIN, w_y_coords[-1] - BOX_MARGIN
))
lines.append(r"  \node at (8, 5.2) {$W, |W|=w$};")
lines.append(r"\end{pgfonlayer}")


# --- Step 1: Basic Setup and Counting Argument ---
lines.append(r"% --- SLIDE 1: Setup ---")
lines.append(r"\uncover<1->{")
lines.append(r"  % Draw some faint edges to represent the graph H")
edges = [(0,0), (0,1), (1,2), (1,3), (2,1), (2,4), (3,5), (3,6), (4,7), (4,8)]
for u_idx, w_idx in edges:
    lines.append(r"  \draw[line width={}pt, black!20] (U{}) -- (W{});".format(LINE_THICKNESS, u_idx, w_idx))
lines.append(r"  % Draw all vertices")
for i in range(U_SIZE): lines.append(r"  \fill[black] (U{}) circle ({}pt);".format(i, DOT_THICKNESS))
for i in range(W_SIZE): lines.append(r"  \fill[black] (W{}) circle ({}pt);".format(i, DOT_THICKNESS))
lines.append(r"  \node[anchor=west, text width=5cm] at (9.5, 4) {Assume $H$ is $K(s,t)$-free.};")
lines.append(r"  \node[anchor=west, text width=5cm] at (9.5, 2.5) {We count pairs $(x, T)$ where $x \in U$ and $T \subseteq N(x)$ with $|T|=t$.};")
lines.append(r"}")


# --- Step 2: The Upper Bound ---
lines.append(r"% --- SLIDE 2: Upper Bound ---")
lines.append(r"\uncover<2->{")
# Highlight a set T in W
t_indices = [1, 3, 5, 7] # Example t=4
lines.append(r"  \node[blue, anchor=east] at (7.8, 4.1) {$T$};")
for i in t_indices:
    lines.append(r"  \fill[blue] (W{}) circle ({}pt);".format(i, DOT_THICKNESS + 0.5))
# Show vertices in U connected to T
s_minus_1_indices = [0, 2] # Example s-1=2
for u_idx in s_minus_1_indices:
    lines.append(r"  \fill[red] (U{}) circle ({}pt);".format(u_idx, DOT_THICKNESS + 0.5))
    for w_idx in t_indices:
        lines.append(r"  \draw[line width={}pt, red, semithick] (U{}) -- (W{});".format(LINE_THICKNESS, u_idx, w_idx))
# Show the forbidden K(s,t)
lines.append(r"  \only<2>{")
lines.append(r"    \fill[red!50!black] (U4) circle ({}pt);".format(DOT_THICKNESS + 0.5))
for w_idx in t_indices:
    lines.append(r"    \draw[line width={}pt, red!50!black, dashed] (U4) -- (W{});".format(LINE_THICKNESS, w_idx))
lines.append(r"    \node[red!60!black, thick, draw, rounded corners] at (4, -0.5) {Adding one more vertex makes a $K(s,t)$!};")
lines.append(r"  }")
lines.append(r"  \node[anchor=west, text width=5cm] at (9.5, 1) {For any set $T \subset W$, at most $s-1$ vertices in $U$ are fully connected to it.};")
lines.append(r"}")

# --- Step 3: The Lower Bound ---
lines.append(r"% --- SLIDE 3: Lower Bound ---")
lines.append(r"\uncover<3->{")
# Highlight one vertex x and its neighborhood
x_idx = 1
x_neighbors = [0, 1, 2, 3, 4, 6] # Example d(x) = 6
lines.append(r"  \fill[teal] (U{}) circle ({}pt);".format(x_idx, DOT_THICKNESS + 1))

# FIX 1: Calculate the Y-coordinate in Python
y_coord_for_node = u_y_coords[x_idx]
lines.append("  \\node[teal, anchor=east] at (-0.2, {}) {{$x$}};".format(y_coord_for_node))

for w_idx in x_neighbors:
    lines.append(r"  \draw[line width={}pt, teal] (U{}) -- (W{});".format(LINE_THICKNESS + 0.5, x_idx, w_idx))

# FIX 2: Calculate the coordinates for the dashed box in Python
y_top = w_y_coords[x_neighbors[0]] + 0.3
y_bottom = w_y_coords[x_neighbors[-1]] - 0.3
lines.append(
    f"  \\draw[teal, dashed, rounded corners] (7.7, {y_top:.2f}) -- (7.7, {y_bottom:.2f}) -- "
    f"(8.3, {y_bottom:.2f}) -- (8.3, {y_top:.2f}) -- cycle;"
)

lines.append(r"  \node[teal, align=center] at (6, 2.5) {Vertex $x$ contributes \\ $\binom{d(x)}{t}$ pairs.};")
lines.append(r"  \node[anchor=west, text width=5.5cm] at (9.5, -1.2) {By convexity (Jensen's inequality), the total count is minimized when all degrees are average, $\bar{d} = |E|/u$.};")
lines.append(r"}")


# --- Preamble and layers ---
lines.insert(1, r"\pgfdeclarelayer{background}")
lines.insert(2, r"\pgfsetlayers{background,main}")

lines.append(r"\end{tikzpicture}")

# --- Write TikZ code to a file ---
try:
    with open(output_filename, "w") as f:
        f.write("\n".join(lines))
    print(f"Success: Corrected TikZ code has been written to '{output_filename}'")
except Exception as e:
    print(f"Error: Could not write to file. {e}")